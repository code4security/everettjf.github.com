<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[everettjf]]></title>
  <subtitle><![CDATA[Love Life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://everettjf.github.io/"/>
  <updated>2015-10-31T10:18:33.000Z</updated>
  <id>http://everettjf.github.io/</id>
  
  <author>
    <name><![CDATA[everettjf]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Xcode插件XBookmark开发笔记]]></title>
    <link href="http://everettjf.github.io/2015/10/04/xbookmark-develop-note/"/>
    <id>http://everettjf.github.io/2015/10/04/xbookmark-develop-note/</id>
    <published>2015-10-03T16:33:53.000Z</published>
    <updated>2015-10-31T10:18:33.000Z</updated>
    <content type="html"><![CDATA[<p>代码：<a href="https://github.com/everettjf/XBookmark" target="_blank" rel="external">https://github.com/everettjf/XBookmark</a></p>
<h1 id="效果">效果</h1><p><img src="http://everettjf.github.io/images/extern/xbookmark0.3.0.png" alt="menu"></p>
<h1 id="使用方法">使用方法</h1><p>首先要安装插件管理器 <code>Alcatraz</code> ，搜索<code>XBookmark</code>并安装，重启Xcode后就可以在<code>Edit</code>菜单中找到以下功能啦。</p>
<pre><code>-<span class="ruby"> 对应代码行，按<span class="constant">F3</span>可增加、删除书签
</span>-<span class="ruby"> <span class="constant">Shift</span>+<span class="constant">F3</span>，可显示书签列表
</span>-<span class="ruby"> <span class="constant">Command</span>+<span class="constant">F3</span>，下一个书签
</span>-<span class="ruby"> <span class="constant">Shift</span>+<span class="constant">Ctrl</span>+<span class="constant">F3</span>，上一个书签</span>
</code></pre><h1 id="背景">背景</h1><p>初入iOS开发，发现自己以前在Visual Studio中常用的书签功能，Xcode中竟然没有。网上找了一阵子，大概有以下替代方法：</p>
<pre><code>-<span class="ruby"> 使用断点（<span class="constant">Disabled</span> <span class="constant">Breakpoint</span>)
</span>-<span class="ruby"> 使用插件<span class="constant">XToDo</span>，增加标签<span class="constant">BOOKMARK</span>，并在想加书签的代码行增加注释 <span class="constant">BOOKMARK</span>
</span>-<span class="ruby"> 使用插件<span class="constant">XcodeBookmark</span>（不是本文说的<span class="constant">XBookmark</span>），但此插件貌似不支持<span class="constant">Xcode7</span>，而且原理仍然是辅助增加断点。</span>
</code></pre><p>目前找到了这3种方法，但感觉都不理想。没法快速进行上一个书签、下一个书签切换，没法增加书签注释。<br>于是，想自己开发一个，就叫做 <code>XBookmark</code> 吧。</p>
<h1 id="预习文章">预习文章</h1><p>开发中大概看了以下几篇文章。</p>
<p>Xcode插件的文章：</p>
<p><a href="http://studentdeng.github.io/blog/2014/02/21/xcode-plugin-fun/" target="_blank" rel="external">http://studentdeng.github.io/blog/2014/02/21/xcode-plugin-fun/</a><br><a href="http://www.poboke.com/study/write-a-xcode-plugin-to-auto-select-all-targets.html" target="_blank" rel="external">http://www.poboke.com/study/write-a-xcode-plugin-to-auto-select-all-targets.html</a><br><a href="http://www.onevcat.com/2013/02/xcode-plugin/" target="_blank" rel="external">http://www.onevcat.com/2013/02/xcode-plugin/</a></p>
<p>Mac开发的文章：</p>
<p><a href="http://www.raywenderlich.com/17811/how-to-make-a-simple-mac-app-on-os-x-10-7-tutorial-part-13" target="_blank" rel="external">http://www.raywenderlich.com/17811/how-to-make-a-simple-mac-app-on-os-x-10-7-tutorial-part-13</a></p>
<p>还看了几个插件的源码。</p>
<h1 id="开发步骤简要总结">开发步骤简要总结</h1><h2 id="安装模板、创建工程">安装模板、创建工程</h2><pre><code>在 Alcatraz 中的 Templates 中搜索 Xcode <span class="keyword">Plugin</span>。安装后从此模板创建工程。
</code></pre><p><img src="http://everettjf.github.io/images/extern/xbookmarkdev1.png" alt="XcodePluginTemplate"><br><img src="http://everettjf.github.io/images/extern/xbookmarkdev2.png" alt="XcodePluginCreate"></p>
<h2 id="增加菜单">增加菜单</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">NSMenuItem</span> *<span class="atom">menuItem</span> = [[<span class="name">NSApp</span> <span class="atom">mainMenu</span>] <span class="atom">itemWithTitle</span>:@<span class="string">"Edit"</span>];</span><br><span class="line"><span class="atom">if</span> (<span class="atom">menuItem</span>) &#123;</span><br><span class="line">    [[<span class="atom">menuItem</span> <span class="atom">submenu</span>] <span class="atom">addItem</span>:[<span class="name">NSMenuItem</span> <span class="atom">separatorItem</span>]];</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="name">NSMenuItem</span> *<span class="atom">actionMenuItem</span> = [[<span class="name">NSMenuItem</span> <span class="atom">alloc</span>] <span class="atom">initWithTitle</span>:@<span class="string">"Toggle Bookmark"</span> <span class="atom">action</span>:@<span class="atom">selector</span>(<span class="atom">toggleBookmark</span>) <span class="atom">keyEquivalent</span>:<span class="atom">f3</span>];</span><br><span class="line">        [<span class="atom">actionMenuItem</span> <span class="atom">setKeyEquivalentModifierMask</span>:<span class="number">0</span>];</span><br><span class="line">        [<span class="atom">actionMenuItem</span> <span class="atom">setTarget</span>:<span class="atom">self</span>];</span><br><span class="line">        [[<span class="atom">menuItem</span> <span class="atom">submenu</span>] <span class="atom">addItem</span>:<span class="atom">actionMenuItem</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    //...</span><br></pre></td></tr></table></figure>
<h2 id="获取书签位置">获取书签位置</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">IDESourceCodeEditor</span>* <span class="atom">editor</span> = [<span class="name">XcodeUtil</span> <span class="atom">currentEditor</span>];</span><br><span class="line"><span class="name">NSTextView</span>* <span class="atom">textView</span> = <span class="atom">editor</span>.<span class="atom">textView</span>;</span><br><span class="line"><span class="atom">if</span> (<span class="atom">nil</span> == <span class="atom">textView</span>)</span><br><span class="line">    <span class="atom">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="name">NSRange</span> <span class="atom">range</span> = [<span class="atom">textView</span>.<span class="atom">selectedRanges</span>[<span class="number">0</span>] <span class="atom">rangeValue</span>];</span><br><span class="line"><span class="name">NSUInteger</span> <span class="atom">lineNumber</span> = [[[<span class="atom">textView</span> <span class="atom">string</span>]<span class="atom">substringToIndex</span>:<span class="atom">range</span>.<span class="atom">location</span>]<span class="atom">componentsSeparatedByString</span>:@<span class="string">"\n"</span>].<span class="atom">count</span>;</span><br><span class="line"></span><br><span class="line">// <span class="atom">length</span> <span class="atom">of</span> <span class="string">"file://"</span> <span class="atom">is</span> <span class="number">7</span></span><br><span class="line"><span class="name">NSString</span> *<span class="atom">sourcePath</span> = [[<span class="atom">editor</span>.<span class="atom">sourceCodeDocument</span>.<span class="atom">fileURL</span> <span class="atom">absoluteString</span>] <span class="atom">substringFromIndex</span>:<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="name">XBookmarkEntity</span> *<span class="atom">bookmark</span> = [[<span class="name">XBookmarkEntity</span> <span class="atom">alloc</span>]<span class="atom">initWithSourcePath</span>:<span class="atom">sourcePath</span> <span class="atom">withLineNumber</span>:<span class="atom">lineNumber</span>];</span><br><span class="line">[[<span class="name">XBookmarkModel</span> <span class="atom">sharedModel</span>]<span class="atom">toggleBookmark</span>:<span class="atom">bookmark</span>];</span><br><span class="line"></span><br><span class="line">//...</span><br></pre></td></tr></table></figure>
<h2 id="增加书签列表">增加书签列表</h2><p><img src="http://everettjf.github.io/images/extern/xbookmarkdev3.png" alt="XBookmarkList"></p>
<h2 id="发布到_Alcatraz">发布到 Alcatraz</h2><p>挺简单，修改配置文件，创建一个 Pull Request 就可以。<br>见 <a href="https://github.com/supermarin/alcatraz-packages" target="_blank" rel="external">https://github.com/supermarin/alcatraz-packages</a> 的README。</p>
<h1 id="结语">结语</h1><p>目前仅是完成了基本功能，还有几个需要优化和完善的地方。</p>
<ul>
<li>定位代码行。（代码来自XToDo的代码，但有些情况下定位速度慢。需要查找原因解决）</li>
<li>书签标识。代码行前面显示书签符号，对号之类的。</li>
<li>注释功能。（增加书签注释功能）</li>
<li>Mnemonic 书签。（模仿 IntelliJ 系列）</li>
</ul>
<hr>
<h1 id="2015年10月31日更新">2015年10月31日更新</h1><p>感谢网友提供了JumpMarks这个插件（当时如果知道了这个插件，或许就不会开发这个XBookmark了），这个插件实现了快速定位代码行，以及在代码行签名增加标记。但没有提供一个标签列表（还好XBookmark有点区别）。</p>
<p>经过学习JumpMarks的代码，XBookmark近期发布了两个版本（0.2与0.3），感谢JumpMarks作者。</p>
<ul>
<li>0.2版，实现了快速定位代码行。</li>
<li>0.3版，增加了快捷键自定义，以及代码行前面的标识。</li>
</ul>
<p>开发XBookmark的过程很开心，第一次Merge PullRequest（感谢<a href="https://github.com/langyapojun" target="_blank" rel="external">https://github.com/langyapojun</a> 解决了Xcode7支持问题），以前没有开发过公开的工具（闷头开发，5年眨眼过去），今年尝试改变，为开源贡献点代码。</p>
<p>关于Xcode7支持的问题，我还挺纳闷，自己开发一直都是Xcode7（Xcode6升级到的Xcode7），为什么没有那个id也可以正常用呢。我得研究研究去……</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>代码：<a href="https://github.com/everettjf/XBookmark" target="_blank" rel="external">https://github.com/everettjf/XBookmark</a></p>
<h1 id=]]>
    </summary>
    
      <category term="XBookmark,Xcode插件,开发笔记" scheme="http://everettjf.github.io/tags/XBookmark-Xcode%E6%8F%92%E4%BB%B6-%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="开发" scheme="http://everettjf.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简单的TabPageScrollView开发笔记]]></title>
    <link href="http://everettjf.github.io/2015/09/26/simple-tab-page-scroll-view-publish/"/>
    <id>http://everettjf.github.io/2015/09/26/simple-tab-page-scroll-view-publish/</id>
    <published>2015-09-26T14:38:41.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>看到CocoaPods上这么多好东西，初入iOS开发，也想熟悉熟悉这个流程。<br>想到最近自己开发的一个简单的Tab页面，尝试完善一下，做的更通用一些，放到CocoaPods上。</p>
<h1 id="最终">最终</h1><p>使用方法及代码见：<a href="https://github.com/everettjf/EVTTabPageScrollView" target="_blank" rel="external">https://github.com/everettjf/EVTTabPageScrollView</a></p>
<p><img src="http://everettjf.github.io/images/extern/EVTTabPageScrollView.gif" alt="demo"></p>
<h1 id="步骤">步骤</h1><ol>
<li><p>创建模板工程<br> 参考链接：<a href="https://guides.cocoapods.org/making/using-pod-lib-create.html" target="_blank" rel="external">https://guides.cocoapods.org/making/using-pod-lib-create.html</a></p>
 <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="class"><span class="keyword">lib</span> <span class="title">create</span> <span class="title">MyLibrary</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改描述、编写库的代码</p>
</li>
<li><p>测试</p>
 <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="class"><span class="keyword">lib</span> <span class="title">lint</span></span></span><br><span class="line">pod spec lint</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传</p>
 <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>pod trunk register orta<span class="variable">@cocoapods</span>.org <span class="string">'Orta Therox'</span> --description=<span class="string">'macbook air'</span></span><br><span class="line"><span class="variable">$ </span>pod trunk push <span class="constant">EVTTabPageScrollView.</span>podspec</span><br></pre></td></tr></table></figure>
<p> 参考链接：<a href="https://guides.cocoapods.org/making/getting-setup-with-trunk" target="_blank" rel="external">https://guides.cocoapods.org/making/getting-setup-with-trunk</a></p>
</li>
</ol>
<h1 id="其他">其他</h1><p>这个还很简单，仅作为自己试用CocoaPods的例子。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>看到CocoaPods上这么多好东西，初入iOS开发，也想熟悉熟悉这个流程。<br>想到最近自己开发的一个简单的Tab页面，尝试完善一下，做的更通用一些，放到CocoaPods上。</p>
<h1 id="最终">最终</h1><p>使]]>
    </summary>
    
      <category term="TabPage,iOS" scheme="http://everettjf.github.io/tags/TabPage-iOS/"/>
    
      <category term="开发" scheme="http://everettjf.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS崩溃收集与分析，使用plcrashreporter]]></title>
    <link href="http://everettjf.github.io/2015/09/09/ios-plcrashreporter/"/>
    <id>http://everettjf.github.io/2015/09/09/ios-plcrashreporter/</id>
    <published>2015-09-08T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/everettjf/ios_crash_report_demo" target="_blank" rel="external">本文示例代码</a></p>
<h1 id="简介">简介</h1><p>App上线后，如果崩溃，难道只能干瞪眼？不可能拿到用户的手机来通过Organizer导入崩溃日志，因此需要在程序崩溃时自动收集崩溃的日志，并在程序再次启动时，将崩溃日志上传到服务器。</p>
<ol>
<li>崩溃日志要关联到某一个revision的代码（如果是svn）。（一般使用持续集成Jenkins，可以通过Jenkins的BuildNumber间接关联到代码）。</li>
<li>对应版本的dSYM符号文件。（链接时可配置生成）</li>
</ol>
<h1 id="直接调用系统函数获取崩溃时的栈信息">直接调用系统函数获取崩溃时的栈信息</h1><p>这种方式，能获取到简单的崩溃信息，但无法配合dSYM文件，定位到具体的哪行代码。且能获取到的崩溃类型种类有限，如果要获取更多的信息还需要更多的工作（下文中的开源的plcrashreporter已经做好了）。</p>
<ul>
<li>signal 进行错误信号的捕获</li>
<li>NSSetUncaughtExceptionHandler 未捕获的OC异常</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s_fatal_signals[] = &#123;</span><br><span class="line">    SIGABRT,</span><br><span class="line">    SIGBUS,</span><br><span class="line">    SIGFPE,</span><br><span class="line">    SIGILL,</span><br><span class="line">    SIGSEGV,</span><br><span class="line">    SIGTRAP,</span><br><span class="line">    SIGTERM,</span><br><span class="line">    SIGKILL,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s_fatal_signal_num = <span class="keyword">sizeof</span>(s_fatal_signals) / <span class="keyword">sizeof</span>(s_fatal_signals[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UncaughtExceptionHandler</span><span class="params">(NSException *exception)</span> </span>&#123;</span><br><span class="line">    NSArray *arr = [exception callStackSymbols];<span class="comment">//得到当前调用栈信息</span></span><br><span class="line">    NSString *reason = [exception reason];<span class="comment">//非常重要，就是崩溃的原因</span></span><br><span class="line">    NSString *name = [exception name];<span class="comment">//异常类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SignalHandler</span><span class="params">(<span class="keyword">int</span> code)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    NSLog(@<span class="string">"signal handler = %d"</span>,code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitCrashReport</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// 1 linux错误信号捕获</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s_fatal_signal_num; ++i) &#123;</span><br><span class="line">        signal(s_fatal_signals[i], SignalHandler);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2 objective-c未捕获异常的捕获</span></span><br><span class="line">    NSSetUncaughtExceptionHandler(&amp;UncaughtExceptionHandler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        InitCrashReport();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate <span class="keyword">class</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用PLCrashReporter">使用PLCrashReporter</h1><h2 id="官网">官网</h2><p><a href="https://www.plcrashreporter.org/" target="_blank" rel="external">https://www.plcrashreporter.org/</a></p>
<h2 id="安装">安装</h2><p>可使用CocoaPods安装：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> <span class="string">'PLCrashReporter'</span>, <span class="string">'~&gt; 1.2'</span></span><br></pre></td></tr></table></figure></p>
<h2 id="示例">示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> <span class="comment">// Called to handle a pending crash report.</span></span><br><span class="line"> <span class="comment">//</span></span><br><span class="line">- (<span class="keyword">void</span>) handleCrashReport &#123;</span><br><span class="line">     PLCrashReporter *crashReporter = [PLCrashReporter sharedReporter];</span><br><span class="line">     NSData *crashData;</span><br><span class="line">     NSError *error;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Try loading the crash report</span></span><br><span class="line">     crashData = [crashReporter loadPendingCrashReportDataAndReturnError: &amp;error];</span><br><span class="line">     <span class="keyword">if</span> (crashData == nil) &#123;</span><br><span class="line">         NSLog(@<span class="string">"Could not load crash report: %@"</span>, error);</span><br><span class="line">         [crashReporter purgePendingCrashReport];</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    [crashData writeToFile:[self crashDataPath] atomically:YES];</span><br><span class="line"></span><br><span class="line">     <span class="comment">// We could send the report from here, but we'll just print out</span></span><br><span class="line">     <span class="comment">// some debugging info instead</span></span><br><span class="line">     PLCrashReport *report = [[PLCrashReport alloc] initWithData: crashData error: &amp;error];</span><br><span class="line">     <span class="keyword">if</span> (report == nil) &#123;</span><br><span class="line">         NSLog(@<span class="string">"Could not parse crash report"</span>);</span><br><span class="line">         [crashReporter purgePendingCrashReport];</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     NSLog(@<span class="string">"Crashed on %@"</span>, report.systemInfo.timestamp);</span><br><span class="line">     NSLog(@<span class="string">"Crashed with signal %@ (code %@, address=0x%"</span> PRIx64 <span class="string">")"</span>, report.signalInfo.name,</span><br><span class="line">           report.signalInfo.code, report.signalInfo.address);</span><br><span class="line">    </span><br><span class="line">    NSString *humanText = [PLCrashReportTextFormatter stringValueForCrashReport:report withTextFormat:PLCrashReportTextFormatiOS];</span><br><span class="line">    </span><br><span class="line">    [self WriteContent:humanText];</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// Purge the report</span></span><br><span class="line">     [crashReporter purgePendingCrashReport];</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">    </span><br><span class="line">    PLCrashReporter *crashReporter = [PLCrashReporter sharedReporter];</span><br><span class="line">    NSError *error;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Check if we previously crashed</span></span><br><span class="line">    <span class="keyword">if</span> ([crashReporter hasPendingCrashReport])</span><br><span class="line">        [self handleCrashReport];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable the Crash Reporter</span></span><br><span class="line">    <span class="keyword">if</span> (![crashReporter enableCrashReporterAndReturnError: &amp;error])</span><br><span class="line">        NSLog(@<span class="string">"Warning: Could not enable crash reporter: %@"</span>, error);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配合dSYM文件">配合dSYM文件</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">crashData</span> = [crashReporter loadPendingCrashReportDataAndReturnError: &amp;<span class="built_in">error</span>];</span><br></pre></td></tr></table></figure>
<p>返回的NSData是plcrashreporter私有的格式，通过官方提供的<code>plcrashutil</code>工具可转换为标准的苹果崩溃日志。</p>
<p>例如：</p>
<ol>
<li>打开示例工程，Command + R 运行，然后退出程序。</li>
<li>单独通过模拟器运行plcrashreporter2。点击 Exception 触发崩溃。</li>
<li>再次打开App，App将自动把崩溃日志记录为d.plcrash。</li>
<li>打开Xcode菜单，Window -&gt; Projects ，点击Derived Data右侧的小箭头，进入 /Users/everettjf/Library/Developer/Xcode/DerivedData/plcrashreportertest2-aoaojvrcqilsxqcarfmgulsddpvc/</li>
<li>再手动进入目录 Build/Products/Debug-iphonesimulator，这里保存着 plcrashreportertest2.app.dSYM 和 plcrashreportertest2.app 文件，（为方便演示）将这两个文件复制到桌面。（注：产品发布的Archive时，也会生成对应的dSYM文件，会在另一个目录。这些目录其实都是可以配置的，一些工具例如：shenzhen或fastlane中的gym都会自动将dSYM文件夹打包成zip。）(再注：dSYM是个文件夹）</li>
<li>复制出d.plcrash文件。我机器上在这个路径 /Users/everettjf/Library/Developer/CoreSimulator/Devices/319973DD-0853-494A-8688-DC73E733019D/data/Containers/Data/Application/D85F4320-1826-4EDD-8167-1197BFA5ACBA/Documents/ 。（可以看终端的输出）（不同模拟器最后的文件夹不同）也复制到桌面。</li>
<li><p>转换为苹果日志格式</p>
 <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ plcrashutil convert --<span class="keyword">format</span>=ios <span class="keyword">d</span>.plcrash &gt; apple.<span class="literal">log</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>dwarfdump 查看uuid</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dwarfdump --uuid plcrashreportertest2.app/plcrashreportertest2</span><br><span class="line">UUID: B1020E4A-<span class="number">07</span>DD-<span class="number">35E4</span>-B3F0-<span class="number">71E3</span>B7CA49BB (x86_64) plcrashreportertest2.app/plcrashreportertest2</span><br><span class="line">$ dwarfdump --uuid plcrashreportertest2.app.dSYM</span><br><span class="line">UUID: B1020E4A-<span class="number">07</span>DD-<span class="number">35E4</span>-B3F0-<span class="number">71E3</span>B7CA49BB (x86_64) plcrashreportertest2.app.dSYM/Contents/Resources/DWARF/plcrashreportertest2</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看crashlog的uuid</p>
 <figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Binary Images:</span><br><span class="line">       <span class="number">0x107d23000</span> -        <span class="number">0x107d4</span>efff +plcrashreportertest2 x86_64  &lt;b<span class="number">1020e4a07</span>dd<span class="number">35e4b3f07</span>1e3b7ca49bb&gt; ......</span><br></pre></td></tr></table></figure>
</li>
<li><p>三个uuid一致，则可以分析了。</p>
</li>
<li><p>symbolicatecrash工具</p>
<ul>
<li>干脆把这个藏得这么深得工具也复制一份出来。</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>SharedFrameworks<span class="regexp">/DTDeviceKitBase.framework/</span>Versions<span class="regexp">/A/</span>Resources/</span><br><span class="line">cp symbolicatecrash ~/Desktop</span><br></pre></td></tr></table></figure>
<ul>
<li>设置DEVELOPER_DIR。</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export DEVELOPER_DIR=<span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer</span><br></pre></td></tr></table></figure>
<ul>
<li>导出。</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./symbolicatecrash apple.log plcrashreportertest2.app.dSYM &gt; <span class="literal">result</span>.log</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后，atos，其中0x107d23000可在 Binary Images:后看到。0x0000000107d24c3e是Last Exception Backtrace 中。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xcrun atos -o plcrashreportertest2.<span class="keyword">app</span>/plcrashreportertest2 -<span class="keyword">l</span> 0x107d23000</span><br><span class="line">0x0000000107d24c3e</span><br><span class="line">-[ViewController exceptionTouchUp:] (<span class="keyword">in</span> plcrashreportertest2) (ViewController.<span class="keyword">m</span>:84)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="结语">结语</h1><p>最后这个atos还需要手动逐个输入，较麻烦。不知道Mac或iOS下有没有像windows下windbg一样的神器，以后知道了补上。</p>
<h1 id="其他开源项目">其他开源项目</h1><ul>
<li>KSCrash<br><a href="https://github.com/kstenerud/KSCrash" target="_blank" rel="external">https://github.com/kstenerud/KSCrash</a></li>
</ul>
<h1 id="参考文章">参考文章</h1><ul>
<li><a href="http://www.jamiegrove.com/software/fixing-bugs-using-os-x-crash-logs-and-atos-to-symbolicate-and-find-line-numbers" target="_blank" rel="external">http://www.jamiegrove.com/software/fixing-bugs-using-os-x-crash-logs-and-atos-to-symbolicate-and-find-line-numbers</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/everettjf/ios_crash_report_demo" target="_blank" rel="external">本文示例代码</a></p>
<h1 id="简介">简介</h1><p>App上线后，如]]>
    </summary>
    
      <category term="iOS" scheme="http://everettjf.github.io/tags/iOS/"/>
    
      <category term="plcrashreporter" scheme="http://everettjf.github.io/tags/plcrashreporter/"/>
    
      <category term="崩溃分析" scheme="http://everettjf.github.io/tags/%E5%B4%A9%E6%BA%83%E5%88%86%E6%9E%90/"/>
    
      <category term="开发" scheme="http://everettjf.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用fastlane实现iOS持续集成]]></title>
    <link href="http://everettjf.github.io/2015/09/08/ios-ci-with-fastlane/"/>
    <id>http://everettjf.github.io/2015/09/08/ios-ci-with-fastlane/</id>
    <published>2015-09-07T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><p>持续集成是个“一次配置长期受益”的工作。但很多小公司都没有。以前在做Windows开发配置感觉简单一些，这次配置iOS的，感觉步骤还挺多。整理出来，分享给大家，不正确的地方请及时指正。</p>
<p>本文主要使用fastlane配置iOS的持续集成，自动编译、打包出多个版本。</p>
<p>最近转行iOS开发，首要任务是使用Jenkins（算是hudson的兄弟）配置iOS工程的持续集成。<br>查找各种资料后，整理出以下几个关键词。</p>
<ol>
<li>jenkins搭建。</li>
<li>使用fastlane中提供的工具修改工程配置。</li>
<li>gym 或 ipa 工具编译工程。</li>
</ol>
<h1 id="目标">目标</h1><ol>
<li>配置一台电脑自动获取代码，并定时打包出以下版本的ipa文件。<ul>
<li>内部测试版本：使用标准开发者的Developer证书签名的ipa文件。</li>
<li>公开测试版本：使用企业账户的Distribute InHouse证书签名的ipa文件。</li>
<li>AppStore版本：使用标准开发者的AppStore证书签名的ipa文件。</li>
<li>渠道版本：内部测试版本，但Info.plist中增加每个渠道的标示符（因为渠道例如fir.im会使用自己的证书重新签名ipa，因此侧部测试版本就可以）</li>
</ul>
</li>
<li>保留每个版本的dSYM调试符号文件。</li>
</ol>
<h1 id="源代码">源代码</h1><p><a href="https://github.com/everettjf/ios_ci_fastlane_demo" target="_blank" rel="external">https://github.com/everettjf/ios_ci_fastlane_demo</a></p>
<h1 id="安装">安装</h1><p>fastlane和shenzhen都需要gem安装，把gem更换为<code>淘宝源</code>。</p>
<ol>
<li><p>安装fastlane<br><pre><br>sudo gem install fastlane<br></pre></p>
<ul>
<li>fastlane是ruby编写，使用gem安装。</li>
<li><a href="https://fastlane.tools/" target="_blank" rel="external">https://fastlane.tools/</a></li>
</ul>
</li>
<li><p>安装shenzhen<br><pre><br>sudo gem install shenzhen<br></pre></p>
<ul>
<li>如果只使用了gym命令，而不使用ipa命令，可以不安装。</li>
<li><a href="https://github.com/nomad/shenzhen" target="_blank" rel="external">https://github.com/nomad/shenzhen</a></li>
</ul>
</li>
</ol>
<h1 id="示例步骤">示例步骤</h1><ol>
<li>在xcodeproj文件同级目录下，执行</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fastlane</span> init</span><br></pre></td></tr></table></figure>
<p>fastlane 很强大，甚至能自动截图，自动提交AppStore审核，不过我只用最简单的打包功能。<br>这里会有一系列提问。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">Do</span> you want <span class="keyword">to</span> get started<span class="attribute">...</span>? y</span><br><span class="line">* <span class="keyword">Do</span> you have everything commited<span class="attribute">...</span> ? y</span><br><span class="line">* App Identifier (com<span class="built_in">.</span>krausefx<span class="built_in">.</span>app): com<span class="built_in">.</span>everettjf<span class="built_in">.</span>fastlanedemo</span><br><span class="line">* Your Apple ID (fastlane@krausefx<span class="built_in">.</span>com): xxxxxxxx@xxxx<span class="built_in">.</span>com</span><br><span class="line">* <span class="attribute">...</span> updates <span class="keyword">to</span> the App Store <span class="subst">or</span> Apple TestFlight? (y/n) n</span><br><span class="line">* <span class="keyword">Do</span> you want <span class="keyword">to</span> setup <span class="string">'snapshot'</span><span class="attribute">...</span> n</span><br><span class="line">* <span class="keyword">Do</span> you want <span class="keyword">to</span> use <span class="string">'sigh'</span><span class="attribute">...</span> n （是否自动下载provisioning文件）</span><br><span class="line">* The scheme name of your app: fastlanetest （如果就一个工程，也可不输入）</span><br></pre></td></tr></table></figure></p>
<p>  上面有一步要输入AppleID，是因为fastlane（的一个工具sigh，这个字母是H）会自动下载对应的provisioning文件。自动下载provisioning文件，对于经常增加测试设备的Developer证书挺方便。不过，示例就不自动下载了。</p>
<p>  执行完成后，会在工程目录下生成fastlane文件夹。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x   <span class="number">5</span> everettjf  staff   <span class="number">170</span>B Sep  <span class="number">8</span> <span class="number">22</span>:<span class="number">32</span> fastlane</span><br><span class="line">drwxr-xr-x  <span class="number">10</span> everettjf  staff   <span class="number">340</span>B Sep  <span class="number">8</span> <span class="number">22</span>:<span class="number">00</span> fastlanedemo</span><br><span class="line">drwxr-xr-x   <span class="number">5</span> everettjf  staff   <span class="number">170</span>B Sep  <span class="number">8</span> <span class="number">22</span>:<span class="number">38</span> fastlanedemo.xcodeproj</span><br><span class="line">drwxr-xr-x   <span class="number">4</span> everettjf  staff   <span class="number">136</span>B Sep  <span class="number">8</span> <span class="number">22</span>:<span class="number">00</span> fastlanedemoTests</span><br></pre></td></tr></table></figure></p>
<p>  我们需要修改fastlane文件夹的两个配置文件：Appfile和Fastfile。（实际是ruby代码）</p>
<ol>
<li>修改Appfile</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app_identifier <span class="string">"com.everettjf.fastlanedemo"</span></span><br><span class="line">apple_id <span class="string">"aaa@aaa.com"</span></span><br><span class="line"></span><br><span class="line">for_lane <span class="symbol">:inhouse</span> <span class="keyword">do</span></span><br><span class="line">  app_identifier <span class="string">"com.everettjf.fastlanedemoqiye"</span></span><br><span class="line">  apple_id <span class="string">"bbb@bbb.com"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>  企业InHouse版本与AppStore的app_identifier、apple_id不同。<br>  这里for_lane 就是为后面Fastfile中定义的:inhouse版本设置单独的信息。</p>
<ol>
<li><p>修改Fastfile</p>
<p>这个文件中要编写每个版本的编译和打包代码（Developer版本、AppStore版本、InHouse版本、多个渠道版本），<br>每个版本要经过以下几个步骤：</p>
<ul>
<li><p>修改版本号和build号（修改为外部传入的版本，例如：1.0.0和100）</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare_version</span><span class="params">(options)</span></span></span><br><span class="line">    <span class="comment">#say 'version number:'</span></span><br><span class="line">    <span class="comment">#say options[:version]</span></span><br><span class="line">    increment_version_number(</span><br><span class="line">        <span class="symbol">version_number:</span> options[<span class="symbol">:version</span>],</span><br><span class="line">        <span class="symbol">xcodeproj:</span> <span class="constant">PROJECT_FILE_PATH</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">#say 'build number:'</span></span><br><span class="line">    <span class="comment">#say options[:build]</span></span><br><span class="line">    increment_build_number(</span><br><span class="line">        <span class="symbol">build_number:</span> options[<span class="symbol">:build</span>],</span><br><span class="line">        <span class="symbol">xcodeproj:</span> <span class="constant">PROJECT_FILE_PATH</span>,</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改app identifier（就是bundle id，例如：com.everettjf.fastlanedemo）</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_app_identifier</span><span class="params">(app_id)</span></span></span><br><span class="line">    update_info_plist(</span><br><span class="line">        <span class="symbol">xcodeproj:</span><span class="constant">PROJECT_FILE_PATH</span> ,</span><br><span class="line">        <span class="symbol">app_identifier:</span>app_id,</span><br><span class="line">        <span class="symbol">plist_path:</span><span class="string">"<span class="subst">#&#123;<span class="constant">PLIST_FILE_PATH</span>&#125;</span>"</span></span><br><span class="line">    )</span><br><span class="line">    update_info_plist(</span><br><span class="line">        <span class="symbol">xcodeproj:</span><span class="constant">PROJECT_FILE_PATH</span> ,</span><br><span class="line">        <span class="symbol">app_identifier:</span>app_id,</span><br><span class="line">        <span class="symbol">plist_path:</span><span class="string">"<span class="subst">#&#123;<span class="constant">UNITTEST_PLIST_FILE_PATH</span>&#125;</span>"</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改签名的配置，配置对应的provision file</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_provision</span><span class="params">(typePrefix)</span></span></span><br><span class="line">  update_project_provisioning(</span><br><span class="line">      <span class="symbol">xcodeproj:</span><span class="constant">PROJECT_FILE_PATH</span> ,</span><br><span class="line">      <span class="symbol">profile:</span><span class="string">"./fastlane/provision/<span class="subst">#&#123;typePrefix&#125;</span>.mobileprovision"</span>,</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>渠道版本修改Info.plist文件中对应的字符串</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_info_plist_value</span><span class="params">(path,key,value)</span></span></span><br><span class="line">  sh <span class="string">"/usr/libexec/PlistBuddy -c \"set :<span class="subst">#&#123;key&#125;</span> <span class="subst">#&#123;value&#125;</span>\" <span class="subst">#&#123;path&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_channel_id</span><span class="params">(channelId)</span></span></span><br><span class="line">    set_info_plist_value(</span><br><span class="line">        <span class="string">"./../fastlanedemo/<span class="subst">#&#123;<span class="constant">PLIST_FILE_PATH</span>&#125;</span>"</span>,</span><br><span class="line">        <span class="string">'ChannelID'</span>,</span><br><span class="line">        <span class="string">"<span class="subst">#&#123;channelId&#125;</span>"</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编译打包为ipa</p>
</li>
</ul>
<p>这步使用了工具shenzhen，也可以使用fastlane推荐的gym。</p>
</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_ipa</span><span class="params">(typePrefix,options)</span></span></span><br><span class="line">  <span class="comment">#say 'generate ipa'</span></span><br><span class="line">  fullVersion = options[<span class="symbol">:version</span>] + <span class="string">'.'</span> + options[<span class="symbol">:build</span>]</span><br><span class="line">  channelId = options[<span class="symbol">:channel_id</span>]</span><br><span class="line">  ipa(</span><br><span class="line">      <span class="symbol">configuration:</span><span class="string">"Release"</span>,</span><br><span class="line">      <span class="symbol">scheme:</span><span class="string">"<span class="subst">#&#123;<span class="constant">SCHEME_NAME</span>&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">destination:</span><span class="string">"./build"</span>,</span><br><span class="line">      <span class="symbol">ipa:</span><span class="string">"<span class="subst">#&#123;<span class="constant">APP_NAME</span>&#125;</span>_<span class="subst">#&#123;fullVersion&#125;</span>_<span class="subst">#&#123;typePrefix&#125;</span>.ipa"</span>,</span><br><span class="line">      <span class="symbol">archive:</span><span class="keyword">false</span></span><br><span class="line">  )</span><br><span class="line">  sh <span class="string">"mv ./../build/<span class="subst">#&#123;<span class="constant">APP_NAME</span>&#125;</span>.app.dSYM.zip ./../build/<span class="subst">#&#123;<span class="constant">APP_NAME</span>&#125;</span>_<span class="subst">#&#123;fullVersion&#125;</span>_<span class="subst">#&#123;typePrefix&#125;</span>.app.dSYM.zip"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<ol>
<li>编写shell脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># usage:</span></span><br><span class="line"><span class="comment"># &gt; sh build.sh 1.0.0 200</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">versionNumber=<span class="variable">$1</span> <span class="comment"># 1.0.0</span></span><br><span class="line">buildNumber=<span class="variable">$2</span> <span class="comment"># 2000</span></span><br><span class="line"></span><br><span class="line">rm -rf build</span><br><span class="line"></span><br><span class="line">basicLanes=<span class="string">"AdHoc AppStore Develop InHouse"</span></span><br><span class="line"><span class="keyword">for</span> laneName <span class="keyword">in</span> <span class="variable">$basicLanes</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    fastlane <span class="variable">$laneName</span> version:<span class="variable">$versionNumber</span> build:<span class="variable">$buildNumber</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">channelIds=<span class="string">"fir 91"</span></span><br><span class="line"><span class="keyword">for</span> channelId <span class="keyword">in</span> <span class="variable">$channelIds</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    fastlane Channel version:<span class="variable">$versionNumber</span> build:<span class="variable">$buildNumber</span> channel_id:<span class="variable">$channelId</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh build.sh <span class="number">1.0</span><span class="number">.0</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>  我们传入主版本号和一个自增的id（一般是jenkins的build number）。</p>
<h1 id="配置Jenkins">配置Jenkins</h1><p>有了能一键编译的脚本，让Jenkins在获取代码后，调用build.sh就可以了。</p>
<p>安装<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>install jenkins</span><br></pre></td></tr></table></figure></p>
<p>配置获取代码，获取代码后调用shell：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh</span> build.<span class="keyword">sh</span> 1.0.0 <span class="label">$&#123;BUILD_NUMBER&#125;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="苹果开发者证书配置">苹果开发者证书配置</h1><p>假设我们有两个开发者账号，一个是标准开发者账户（99刀，个人或公司），一个是企业账户（299刀）。</p>
<ul>
<li><p>标准开发者账户：aaa@aaa.com</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Identifier中增加com<span class="class">.everettjf</span><span class="class">.fastlanedemo</span></span><br><span class="line">Provisioning Profiles中增加一个 iOS <span class="function"><span class="title">Distribution</span><span class="params">(AdHoc 和 AppStore)</span></span> 和 iOS Development</span><br></pre></td></tr></table></figure>
</li>
<li><p>企业账户：bbb@bbb.com</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Identifier中增加com<span class="class">.everettjf</span><span class="class">.fastlanedemoqiye</span></span><br><span class="line">Provisioning Profiles中增加一个 iOS <span class="function"><span class="title">Distribution</span><span class="params">(AdInHouse)</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="相关文档">相关文档</h1><ul>
<li>fastlane：<a href="https://github.com/KrauseFx/fastlane/tree/master/docs" target="_blank" rel="external">https://github.com/KrauseFx/fastlane/tree/master/docs</a></li>
<li>shenzhen : <a href="https://github.com/nomad/shenzhen" target="_blank" rel="external">https://github.com/nomad/shenzhen</a></li>
</ul>
<h1 id="其他途径">其他途径</h1><ol>
<li>Jenkins的xcode插件：Jenkins有个xcode插件，网上有些文章，不过自己没有使用。不知道能否<br>动态的更换证书。</li>
<li>一次编译多次签名：在没有使用fastlane之前，看到fastlane提供了一套工具集，就使用gym先编译<br>一个Developer证书签名的ipa，之后使用其他证书分别签名。</li>
</ol>
<h1 id="重要补充">重要补充</h1><ul>
<li>安装jenkins的机器上的Xcode要导入开发者账户（存在私钥的账户信息，通过首次创建证书的电脑上的Xcode导出）</li>
</ul>
<h1 id="2015年10月16日补充">2015年10月16日补充</h1><p>事件：Xcode7发布后</p>
<p>CFBundleIdentifier 建议使用 $(PRODUCT_BUNDLE_IDENTIFIER) 代替原有的 $(BUNDLE_IDENTIFIER). Info.plist文件中的$(BUNDLE_IDENTIFIER)也会自动指向$(PRODUCT_BUNDLE_IDENTIFIER)。</p>
<p>因此，fastlane提供的action <code>update_info_list</code> 无法更新project文件中的$(PRODUCT_BUNDLE_IDENTIFIER) 。<br>也就导致在打包企业版本时原有脚本不能修改位于新位置的bundle identifier，目前临时解决办法：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sh</span> <span class="string">"sed -i '' 's/com.xxx.xxx/com.xxx.yyy/g' path/project.pbxproj"</span></span><br></pre></td></tr></table></figure>
<p>为此给fast lane提了一个issue : <a href="https://github.com/KrauseFx/fastlane/issues/684" target="_blank" rel="external">https://github.com/KrauseFx/fastlane/issues/684</a></p>
<p>fastlane很快会提供更新的方式。<br>感谢fastlane的开发者squarefrog和KrauseFx。</p>
<p><em>文章首次发布于：everettjf.github.io</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="简介">简介</h1><p>持续集成是个“一次配置长期受益”的工作。但很多小公司都没有。以前在做Windows开发配置感觉简单一些，这次配置iOS的，感觉步骤还挺多。整理出来，分享给大家，不正确的地方请及时指正。</p>
<p>本文主要使用fastlane配置iO]]>
    </summary>
    
      <category term="ci" scheme="http://everettjf.github.io/tags/ci/"/>
    
      <category term="fastlane" scheme="http://everettjf.github.io/tags/fastlane/"/>
    
      <category term="iOS" scheme="http://everettjf.github.io/tags/iOS/"/>
    
      <category term="持续集成" scheme="http://everettjf.github.io/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="开发" scheme="http://everettjf.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[(编写中)iOS 知识树]]></title>
    <link href="http://everettjf.github.io/2015/09/02/ios-knowledge-tree/"/>
    <id>http://everettjf.github.io/2015/09/02/ios-knowledge-tree/</id>
    <published>2015-09-01T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<p><em>文章于2015年9月2日开始编写，暂未编写完成……</em></p>
<p>2015年3月份，做了不到2个月的iOS开发。中间停止了2个多月。<br>一直到2015年8月13日，来到北京，正式开始iOS开发。</p>
<p>本文将把我从C++转为iOS开发的过程中遇到的各种知识点罗列出来。</p>
<h1 id="开发环境">开发环境</h1><ol>
<li>MacBook Pro ：各种配置都够用啦。</li>
<li>Xcode ：必备IDE。</li>
<li>Xcode Command Line Tools ：内置各种工具。</li>
<li>XcodePlugins<ul>
<li><a href="http://alcatraz.io/" target="_blank" rel="external">http://alcatraz.io/</a> 插件管理器，必备，方便安装其他插件。</li>
<li>XVim ：vim插件</li>
<li>VVDocumenter-Xcode ： 方便生成各种注释</li>
<li>KSImageNamed ：代码中预览图片</li>
<li>FuzzyAutocomplete ：自动完成的模糊匹配，瞬间让Xcode好用起来。</li>
<li>XToDo</li>
<li>ColorSenseRainbow</li>
</ul>
</li>
<li>XcodeSnippets ：常用代码片段用github管理起来。</li>
<li>CocoaPods ：第三方库少不了用，做C++这几年都手动配置头文件、生成路径、链接库，没注意C++里有这么出名的工具。</li>
</ol>
<h1 id="语言">语言</h1><ol>
<li>Objective-C</li>
<li>@dynamic</li>
</ol>
<h1 id="界面开发">界面开发</h1><ol>
<li>UIView</li>
<li>UIButton</li>
<li>UILabel</li>
<li>UITextEdit</li>
<li>UITextView</li>
<li>UIScrollView</li>
<li>代码写界面：入门很好的一篇文章。<a href="http://www.cocoachina.com/bbs/read.php?tid=131516" target="_blank" rel="external">http://www.cocoachina.com/bbs/read.php?tid=131516</a></li>
<li>UITableView</li>
</ol>
<h1 id="特殊知识">特殊知识</h1><ol>
<li>MVC</li>
<li>MVVM</li>
<li>KVC (Key Value Coding)</li>
<li>KVO (Key Value Observing)<ul>
<li>NSMutableArray特殊对待</li>
<li>KVC是基础知识</li>
</ul>
</li>
<li>Toll-Free Bridging</li>
<li>Bitcode</li>
<li>Method Swizzing</li>
<li>关联对象</li>
<li>Objective C++</li>
<li>消息转发机制（12条）</li>
<li>缓存delegate（23条）</li>
<li>Unittest Specta/Expecta or Kiwi</li>
<li></li>
</ol>
<h1 id="第三方库">第三方库</h1><ol>
<li>AFNetworking</li>
<li>Marsonry</li>
<li>CocoaLumberjack</li>
</ol>
<h1 id="调试">调试</h1><ol>
<li>PLCrashReporter</li>
<li>KSCrash</li>
<li>Exception Catch Internals</li>
</ol>
<h1 id="发布">发布</h1><ol>
<li>ipa文件</li>
<li>代码签名</li>
<li>fastlane工具包</li>
<li>Jenkins持续集成配置</li>
</ol>
<h1 id="逆向">逆向</h1><ol>
<li>todo</li>
</ol>
<h1 id="常用站点">常用站点</h1><ol>
<li>GitHub</li>
<li>CocoaChina</li>
<li>Code4app</li>
</ol>
<h1 id="牛人博客">牛人博客</h1><h1 id="书">书</h1><ol>
<li>《马上着手开发 iOS 应用程序 (Start Developing iOS Apps Today)》 ：苹果官方文档，入门必看。</li>
<li>《Objective-C程序设计》 ：有C++基础，很快就看完了。</li>
<li>《iOS开发指南：从零基础到App Store上架》 ：感觉很基础，也很啰嗦（讲解细致），<br>找几个例子练习以下，以后边用边查。</li>
<li>《精通iOS开发》：补充iOS开发知识体系</li>
<li>《iOS开发进阶》：说是进阶，但都是些实用工具，适合iOS开发一两个月之后看。<br>能很快看完，但工具需要多多使用，慢慢熟练。</li>
<li>《Effective Objective-C 2.0》 ：（在看，挺愉快轻松）</li>
<li>《Objective-C编程之道》：（在看）</li>
<li>《iOS应用逆向工程》：（在浏览）</li>
<li>《深入解析Mac OS X &amp; iOS操作系统》：（在浏览）能了解很多实现原理。</li>
<li>《大话移动APP测试，Android与iOS应用测试指南》：（还未看）</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>文章于2015年9月2日开始编写，暂未编写完成……</em></p>
<p>2015年3月份，做了不到2个月的iOS开发。中间停止了2个多月。<br>一直到2015年8月13日，来到北京，正式开始iOS开发。</p>
<p>本文将把我从C++转为iOS开发的过程中遇]]>
    </summary>
    
      <category term="iOS" scheme="http://everettjf.github.io/tags/iOS/"/>
    
      <category term="知识树" scheme="http://everettjf.github.io/tags/%E7%9F%A5%E8%AF%86%E6%A0%91/"/>
    
      <category term="开发" scheme="http://everettjf.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[北京，我来了，开心的奋斗吧]]></title>
    <link href="http://everettjf.github.io/2015/08/13/beijing-i-came/"/>
    <id>http://everettjf.github.io/2015/08/13/beijing-i-came/</id>
    <published>2015-08-12T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<pre>
2009年还没毕业就去了济南齐鲁软件园，在一家公司一工作就是五年。
五年间，多少次想来北京发展，多少次犹豫。
2015年8月12日，终于实现。

在济南已经有房有车有老婆有孩子。
为什么不继续在济南？

还年轻，工作太稳定不好，应该闯闯，
被这里的互联网的氛围吸引，
被这里的技术氛围吸引，
被这里的同学们吸引，
对这里所有的未知吸引，

围城。

做了5年Windows客户端的开发，主要使用C++。
这次来北京，转行为iOS开发，主要使用Objective C。

不要盲目的奋斗。

</pre>


<pre>
3月份从第一家公司（工作了5年Windows下C++）离职以来，
在一个小创业公司待了不到两个月（转为做iOS开发），
在家又做了两个半月的奶爸兼开发。

这两个半月有两个不成型的作品：
1、LinkHub 开始用golang（beego）开发，后来改为php（laravel）。功能完成了70%，
但效果与我预期还有不少差距。

2、微信公众号“光影e站”的后台，业余摄影师O2O平台。最终因为我决定去北京，转交。

第一个产品更偏向“情怀”，第二个项目算是合伙创业，
但两个月来让我感觉“我还不适合创业，至少现在不适合”，
我更应该做的是找一份工作，继续提升技术能力，
更重要的是维持住家庭的开支，给家庭一份安全感。
</pre>

<pre>
北京，我来了，
开心的奋斗吧。
</pre>
]]></content>
    <summary type="html">
    <![CDATA[<pre>
2009年还没毕业就去了济南齐鲁软件园，在一家公司一工作就是五年。
五年间，多少次想来北京发展，多少次犹豫。
2015年8月12日，终于实现。

在济南已经有房有车有老婆有孩子。
为什么不继续在济南？

还年轻，工作太稳定不好，应该闯闯，
被这里的互联网的氛围吸引，
]]>
    </summary>
    
      <category term="北京" scheme="http://everettjf.github.io/tags/%E5%8C%97%E4%BA%AC/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的渗透测试之路，第零篇，全是工具]]></title>
    <link href="http://everettjf.github.io/2015/07/28/my-pentest-way-part-zero-tools/"/>
    <id>http://everettjf.github.io/2015/07/28/my-pentest-way-part-zero-tools/</id>
    <published>2015-07-27T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<p>2015年9月补充，济南的渗透测试职位没有应聘上，8月份来到北京开始iOS开发，渗透测试之路暂停。渗透测试的简要学习只是作为我的知识面扩展了。</p>
<p>（PS：没有应聘上的原因，应该主要是我要求的待遇较高，想与自己更擅长的技术同等待遇，想多了）</p>
<hr>
<p>第零篇，仅作记录。</p>
<h1 id="背景">背景</h1><pre>
2014年接手一个类似“杀毒软件”（准确的说是查毒软件）的项目，于是按照我的逻辑，
就买了一堆相关的书。其中一本《0Day安全：软件漏洞分析技术》，业余时间就照着
书上一步一步来。

网上找资料，知道了还有 web渗透测试、app渗透测试。于是又买了几本书了解。
</pre>

<h1 id="总结">总结</h1><ul>
<li>三个方向：web、app、二进制方向（服务器、软件）</li>
<li>任何一个方向都可深入很多</li>
<li>不可迷恋工具。metasploit等等工具很多。要理解原理。</li>
<li>二进制类：要求反汇编能力</li>
<li>各种工具整理：<a href="http://pan.baidu.com/s/1mgEduGC" target="_blank" rel="external">下载</a></li>
</ul>
<h1 id="公司">公司</h1><p>几个比较出名的公司或组织或网站</p>
<ul>
<li>web方向：知道创宇</li>
<li>二进制方向：天融信</li>
<li>乌云漏洞报告平台</li>
<li>网络尖刀</li>
</ul>
<h1 id="书">书</h1><pre>
看了一遍：
《计算机病毒分析与防范大全》（感觉挺粗糙的书，但入门不错，能了解不少知识）
《Metasploit渗透测试魔鬼训练营》（好书，五星，入门必备）
《0Day安全：软件漏洞分析技术》（好书，入门必备）
《黑客免杀攻防》（了解如何免杀的很全面的书）
《软件调试》（经典）
《白帽子Web安全》（了解Web安全，入门Web安全）
《Web前端黑客技术揭秘》（稍微深入Web安全）
《社会工程：安全体系中的人性漏洞》（入门社会工程的好书）
《Metasploit渗透测试指南》（打开Metasploit的神秘面纱）
还没看：
《黑客大曝光》
《Rootkit系统灰色地带的潜伏着》

</pre>
]]></content>
    <summary type="html">
    <![CDATA[pentest]]>
    
    </summary>
    
      <category term="渗透测试" scheme="http://everettjf.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="总结" scheme="http://everettjf.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的机器学习之路，第零篇，横冲直撞]]></title>
    <link href="http://everettjf.github.io/2015/07/27/my-machine-learning-way-part-zero/"/>
    <id>http://everettjf.github.io/2015/07/27/my-machine-learning-way-part-zero/</id>
    <published>2015-07-26T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>这是第0篇，下一篇可能会1年之后再写，也可能不再写。</li>
<li>这不是一片成功的文章，只是一个流水账。</li>
<li>横冲直撞，仍需静下心来，潜心研究，一步一脚印。</li>
</ul>
<h1 id="结局">结局</h1><ul>
<li>没有任何结果。</li>
</ul>
<h1 id="总结">总结</h1><ul>
<li>机器学习的人有几种<ul>
<li>数据挖掘专业的研究生。科班出身，数学基础好。</li>
<li>数学专业的研究生。内功好，入门快，主要精力在调参数。</li>
<li>计算机专业的程序员。编码能力强，数学底子弱。</li>
</ul>
</li>
<li>我们是计算机专业的程序员<ul>
<li>编码没问题。</li>
<li>几年编码，数学都忘记了，还需要重新复习。</li>
</ul>
</li>
<li>我们可以这样<ul>
<li>先学习《集体智慧编程》，然后就可以写代码做项目了。</li>
<li>业余时间，做个爬虫。（集体智慧编程中的例子）</li>
<li>补充理论知识。线性代数、微积分、数理统计。见这里的各种教程（<a href="http://www.cppblog.com/everett/archive/2013/08/24/202737.html）" target="_blank" rel="external">http://www.cppblog.com/everett/archive/2013/08/24/202737.html）</a></li>
<li>之后，现在不知道，以后再写。</li>
</ul>
</li>
<li>横冲直撞<ul>
<li>仍需静下心来，潜心研究，一步一脚印。</li>
</ul>
</li>
<li>七月算法<ul>
<li>学习SVM时，看到july的svm博客文章 <a href="http://blog.csdn.net/v_july_v/article/details/7624837。" target="_blank" rel="external">http://blog.csdn.net/v_july_v/article/details/7624837。</a></li>
<li>现在july创办了七月算法。可以去学习下。</li>
<li>机器学习课程，真的想参加一下。<a href="http://www.julyedu.com/course/index/category/machinelearning.html" target="_blank" rel="external">http://www.julyedu.com/course/index/category/machinelearning.html</a></li>
</ul>
</li>
</ul>
<h1 id="流水账">流水账</h1><ul>
<li>2013年上半年，在<a href="1">一位同事</a>的带领下，看到《机器学习实战》一书。当时的学习总结(<a href="http://www.cppblog.com/everett/archive/2013/08/24/202736.html" target="_blank" rel="external">http://www.cppblog.com/everett/archive/2013/08/24/202736.html</a>)</li>
<li>2013年下半年，学习各种理论，<a href="http://www.cppblog.com/everett/archive/2013/08/24/202737.html" target="_blank" rel="external">http://www.cppblog.com/everett/archive/2013/08/24/202737.html</a></li>
<li>2014年上半年，集体智慧编程、模式分类、数据之魅。</li>
<li>2014年12月份，Ruby版本的基于SVM的病毒分类器，代码<a href="https://github.com/everettjf/RubySVMVirusScanner。" target="_blank" rel="external">https://github.com/everettjf/RubySVMVirusScanner。</a></li>
<li>2014年下半年至今（2015年7月份），几乎暂停了一年时间。<ul>
<li>这段时间没有经住好奇心和互联网行业吸引，学习了渗透测试、Android和iOS开发。</li>
<li>消耗了大量时间和精力，并没有达到心中的圣地麦加。</li>
</ul>
</li>
</ul>
<p>[1] - xiao70</p>
]]></content>
    <summary type="html">
    <![CDATA[machine learning]]>
    
    </summary>
    
      <category term="总结" scheme="http://everettjf.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="机器学习" scheme="http://everettjf.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="总结" scheme="http://everettjf.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[坚持与习惯，及近期文章计划]]></title>
    <link href="http://everettjf.github.io/2015/07/21/write-plan-while-busy/"/>
    <id>http://everettjf.github.io/2015/07/21/write-plan-while-busy/</id>
    <published>2015-07-20T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="坚持与习惯">坚持与习惯</h1><p>接近两个月没有写博客，这两个月也是作为”全职奶爸“最忙的一段时间。</p>
<ul>
<li>忙着看孩子，孩子每天定时充电，充电时我就写写程序。</li>
<li>晚上充电时间最长，我的大块时间就在晚上。</li>
</ul>
<p><strong>忙什么了？</strong></p>
<ul>
<li>实现自己的想法：LinkHub简单内测了一个版本，证明确是小众需求，现在在开发第二个内测版本，即将放出(linkhub.pub)。</li>
<li>了解、关注startup，几本书。我是否适合呢？</li>
<li><p>学习了Laravel（世界上最好的语言的一个B格较高的框架），开发了基于微信的简单预约程序。</p>
</li>
<li><p><strong>写博客需要坚持吗？</strong></p>
</li>
<li><strong>不需要坚持，只是需要养成习惯</strong></li>
</ul>
<h1 id="近期文章计划">近期文章计划</h1><p>这两个月做了不少事情，想起一个主题来就记下，结果就记了这么些。</p>
<ul>
<li>公司如何盈利：一些互联网公司的盈利方式</li>
<li>工程师的忙与闲：什么是忙？怎么忙？怎么闲？</li>
<li>C++程序员如何快速iOS开发步入正轨：个人2个月iOS开发的入门经验</li>
<li>那些公司的名称：水果、植物</li>
<li>碎片化学习、系统性学习、系统训练、业余训练</li>
<li>有人在吗？有高手在吗？：群里问问题</li>
<li>无声鼠标的想法与mac触摸板</li>
<li>Laravel入门步骤</li>
<li>小型创业公司的短期感受</li>
<li>全职奶爸的体验</li>
<li>nosql的tag系统设计</li>
<li>微信开发的坑</li>
<li>gitlab邮件配置</li>
<li>LinkHub想法来源，使用说明</li>
</ul>
<h1 id="未来1个月内，将陆续奉上。">未来1个月内，将陆续奉上。</h1><p><strong>写博客是习惯，不需要坚持</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="坚持与习惯">坚持与习惯</h1><p>接近两个月没有写博客，这两个月也是作为”全职奶爸“最忙的一段时间。</p>
<ul>
<li>忙着看孩子，孩子每天定时充电，充电时我就写写程序。</li>
<li>晚上充电时间最长，我的大块时间就在晚上。</li>
</ul]]>
    </summary>
    
      <category term="wechat" scheme="http://everettjf.github.io/tags/wechat/"/>
    
      <category term="计划" scheme="http://everettjf.github.io/tags/%E8%AE%A1%E5%88%92/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis使用方式总结]]></title>
    <link href="http://everettjf.github.io/2015/05/31/redis_basic_learn/"/>
    <id>http://everettjf.github.io/2015/05/31/redis_basic_learn/</id>
    <published>2015-05-30T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<p>《redis入门指南》笔记。<br><em>注意：使用何种类型取决于具体情境，以下仅是某一种方式。</em></p>
<h1 id="数据类型">数据类型</h1><ol>
<li><p>string<br>字符串类型（就是最简单的key-value）</p>
<pre>
SET bar 1
GET bar
</pre>
</li>
<li><p>hash<br>散列类型(key-field1-value1-field2-value2…)</p>
<pre>
HSET car price 500
HSET car name BMW
HGET car name
</pre>
</li>
<li><p>list<br>列表类型(key-value1-value2…)</p>
<pre>
链表实现，靠近两端数据获取速度快，而元素增多后，访问中间数据速度较慢。
更适合“新鲜事”、“日志”这种访问中间元素较少的情况。

LPUSH numbers 1 2 3
RPUSH numbers 6 5 4
LPOP numbers
RPOP numbers
LRANGE numbers 0 -1
</pre>
</li>
<li><p>set<br>集合类型(key-member1-member2…)</p>
<pre>
SADD letters a b c
SREM letters c d
SMEMBERS letters
SISMEMBER letters a
SDIFF lettersA lettersB
SINTER lettersA lettersB
SUNION lettersA lettersB
</pre>
</li>
<li><p>zset<br>有序集合类型(key-score1-member1-score2-memeber2…)</p>
<pre>
ZADD scoreboard 89 Tom 68 Peter 100 David
ZSCORE scoreboard Tom
ZRANGE scoreboard 0 -1
ZRANGE scoreboard 60 90 WITHSCORES
</pre>

</li>
</ol>
<h1 id="博客系统实现">博客系统实现</h1><ol>
<li><p>博客名称存储</p>
<pre>
key = blog.name
type = string
e.g.
SET blog.name
GET blog.name
</pre>
</li>
<li><p>文章自增ID</p>
<pre>
key = posts:count
type = string
e.g.
$postID = INCR posts:count
</pre>
</li>
<li><p>文章访问量统计</p>
<pre>
key = post:$postID:page.view
type = string
e.g.
$pageViewCount = INCR post:10:page.view
</pre>
</li>
<li><p>文章数据（方式一:数据存储为json）</p>
<pre>
key = post:$postID:data
type = string
e.g.
$jsonData = jsonSerialize($title,$content,$author,$time)
SET post:10:data $jsonData
GET post:10:data $jsonData
</pre>
</li>
<li><p>文章数据（方式二：哈希）</p>
<pre>
key = post:$postID
type = hash
e.g.
HSET post:10 title hello
HSET post:10 content helloworld
HSET post:10 author everettjf
HSET post:10 time Now()
</pre>
</li>
<li><p>文章缩略名</p>
<pre>
key = slug.to.id
type = hash
e.g.
$isSlugAvaliable = HSETNX slug.to.id $newSlug 10
</pre>
</li>
<li><p>存储文章ID（方式一：列表）</p>
<pre>
key = posts:list
type = list
e.g.
列表可方便分页及删除文章
LPUSH posts:list 10
$postsIDs = LRANGE posts:list,$start,$end
for each $id in $postsIDs
 $post = HGETALL post:$id
 $title = $post.title
</pre>
</li>
<li><p>存储文章ID，按时间排序（方式二：有序集合）</p>
<pre>
key = posts:createtime
type = zset
e.g.
有序集合存储文章id与创建时间（unix时间）
ZREVRANGEBYSCORE 还可或许时间段内的文章
</pre>
</li>
<li><p>存储评论列表</p>
<pre>
key = post:$postID:comments
type = list
e.g.
$serializedComment = jsonSerialize($author,$email,$time,$content)
LPUSH post:10:comments,$serializedComment
</pre>
</li>
<li><p>存储日志</p>
<pre>
key = logs
type = list
e.g.
LPUSH logs $serializedLog
</pre>
</li>
<li><p>存储标签</p>
<pre>
一个文章的所有标签都不同，且没有排列顺序要求。
key = post:$postID:tags
type = set
e.g.
SADD post:10:tags cpp redis wechat php
$tags = SMEMBERS post:10:tags
</pre>
</li>
<li><p>列出指定一个或多个标签下所有文章</p>
<pre>
key = tag:$tagName:posts
type = set
e.g.
post:1:tags -> java
post:2:tags -> java , mysql
tag:java:posts -> 1 , 2
tag:mysql:posts -> 2

$postsIDsBothWithTagJavaMysql = SINTER tag:java:posts tag:mysql:posts
</pre>
</li>
<li><p>按照点击量排序</p>
<pre>
key = posts:view
type = zset
e.g.
ZINCRBY posts:page.view 1 $postID

$postsIDs = ZREVRANGE posts:page.view $start $end
for each $id in $postsIDs
$postData = HGETALL post:$id
</pre>

</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>《redis入门指南》笔记。<br><em>注意：使用何种类型取决于具体情境，以下仅是某一种方式。</em></p>
<h1 id="数据类型">数据类型</h1><ol>
<li><p>string<br>字符串类型（就是最简单的key-value）</p>
<pre>
]]>
    </summary>
    
      <category term="redis" scheme="http://everettjf.github.io/tags/redis/"/>
    
      <category term="开发" scheme="http://everettjf.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[idea-语音任务指派]]></title>
    <link href="http://everettjf.github.io/2015/05/18/idea-voice-task/"/>
    <id>http://everettjf.github.io/2015/05/18/idea-voice-task/</id>
    <published>2015-05-17T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="语音任务指派">语音任务指派</h1><ul>
<li>我们程序员都在使用各种GTD工具，团队也在使用各种项目管理工具。</li>
<li>但</li>
<li>大量传统行业都在用口口相传、电话接电话的方式传递任务。</li>
</ul>
<h2 id="为什么是语音">为什么是语音</h2><p>方便。让社区小超市老板打字告诉手下做什么事情，太麻烦。</p>
<h2 id="用户故事">用户故事</h2><ul>
<li>老板通过app说出N条任务，分别分配给组织内的其他成员。</li>
<li>成员收到任务后，有疑问，在任务中回复语音。</li>
<li>成员完成任务，标记完成。语音汇报完成结果。老板收到，可以反驳，</li>
<li>成员忘记某条任务（某条任务长时间未完成、或每天下午4点快下班时）提醒。</li>
<li>一个月过去，老板手机可以看到每个人的任务完成报表。</li>
</ul>
<h2 id="承载">承载</h2><ul>
<li>iOS和Android的app。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="语音任务指派">语音任务指派</h1><ul>
<li>我们程序员都在使用各种GTD工具，团队也在使用各种项目管理工具。</li>
<li>但</li>
<li>大量传统行业都在用口口相传、电话接电话的方式传递任务。</li>
</ul>
<h2 id="为什么是]]>
    </summary>
    
      <category term="idea" scheme="http://everettjf.github.io/tags/idea/"/>
    
      <category term="wechat" scheme="http://everettjf.github.io/tags/wechat/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自由职业途径搜集]]></title>
    <link href="http://everettjf.github.io/2015/05/17/freelance-site-collection/"/>
    <id>http://everettjf.github.io/2015/05/17/freelance-site-collection/</id>
    <published>2015-05-16T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="自由职业途径收集">自由职业途径收集</h1><p>主要是面向程序员的自由职业。</p>
<h2 id="国内">国内</h2><ul>
<li>猪八戒 <a href="http://www.zhubajie.com/" target="_blank" rel="external">http://www.zhubajie.com/</a></li>
<li>智城 <a href="http://www.taskcity.com/" target="_blank" rel="external">http://www.taskcity.com/</a></li>
<li>任务中国 <a href="http://www.taskcn.com/" target="_blank" rel="external">http://www.taskcn.com/</a></li>
<li>一品威客 <a href="http://www.epweike.com/" target="_blank" rel="external">http://www.epweike.com/</a></li>
<li>（交流论坛）自由豆 <a href="http://www.ziyoudou.com/" target="_blank" rel="external">http://www.ziyoudou.com/</a></li>
</ul>
<h2 id="国外">国外</h2><ul>
<li>Elance <a href="https://www.elance.com/" target="_blank" rel="external">https://www.elance.com/</a></li>
<li>HopWork <a href="https://www.hopwork.com/" target="_blank" rel="external">https://www.hopwork.com/</a></li>
<li>Freelancer <a href="https://www.freelancer.com/" target="_blank" rel="external">https://www.freelancer.com/</a></li>
</ul>
<h1 id="试用报告">试用报告</h1><p>等试用后补充。//todo</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="自由职业途径收集">自由职业途径收集</h1><p>主要是面向程序员的自由职业。</p>
<h2 id="国内">国内</h2><ul>
<li>猪八戒 <a href="http://www.zhubajie.com/" target="_blank" rel=]]>
    </summary>
    
      <category term="freelance" scheme="http://everettjf.github.io/tags/freelance/"/>
    
      <category term="wechat" scheme="http://everettjf.github.io/tags/wechat/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[梦想随想]]></title>
    <link href="http://everettjf.github.io/2015/05/16/wechat-dream/"/>
    <id>http://everettjf.github.io/2015/05/16/wechat-dream/</id>
    <published>2015-05-15T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<p>从前，在梦的花园里，依古比古依古安，我们要去追……</p>
<h1 id="什么是梦想">什么是梦想</h1><p>经常对自己说，我是在为梦想而奋斗，但梦想是什么？又无法简单的表达出来。</p>
<h1 id="我认为的梦想">我认为的梦想</h1><ul>
<li>当我看到《花园宝宝》，我就想，这一定是一个人的梦想，已经实现了。</li>
<li>当我看到台儿庄酒吧中孤零零独自奋力唱歌的歌手，我就想，他已经走在实现梦想的道路上。</li>
<li>当我看到脉脉中一把一把的创始人，我就想，他们已经为梦想走在了前面。</li>
<li>当我无意间看到一些博客，篇篇记录学习之路的文章，我就想，他们距离梦想越来越近。</li>
<li>当我看到GitHub上一个个开源项目，我就想，那不就是实现梦想过程中的胜利果实。</li>
<li>当我看到TED中精彩的演讲，我就想，演讲者的梦想已经成为了我的梦想。</li>
<li>当我看到四轴飞行器，那么智能的端起水杯，我就想，四轴飞行器也成了我的梦想。</li>
<li>当我与他人拼车，后面小伙流利的英语与老外打电话，我就想，这也曾经是我的梦想。</li>
<li>当我5年前第一次来到软件园，我就想，这是我的梦想。</li>
<li>当我看到一名非科班出身程序员，经过自己的努力写出了《Android学习之路》，我就想，他们距离梦想越来越近。</li>
<li>当我看到《重来2》（Remote），远程办公成了我的梦想。</li>
<li>当我看到程序员边旅游边写程序，自由职业成了我的梦想。</li>
<li>当我脑海中有个想法，宁可辞掉稳定的工作也要尽快实现，实现这个想法就成了我的梦想。</li>
<li>……</li>
</ul>
<h1 id="好奇心与梦想串">好奇心与梦想串</h1><ul>
<li>看到了太多，或许多数只是好奇心。</li>
<li>一个个梦想，前后交叉连接成一串，不断敦促着前进。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>从前，在梦的花园里，依古比古依古安，我们要去追……</p>
<h1 id="什么是梦想">什么是梦想</h1><p>经常对自己说，我是在为梦想而奋斗，但梦想是什么？又无法简单的表达出来。</p>
<h1 id="我认为的梦想">我认为的梦想</h1><ul>
<li>当我看]]>
    </summary>
    
      <category term="dream" scheme="http://everettjf.github.io/tags/dream/"/>
    
      <category term="wechat" scheme="http://everettjf.github.io/tags/wechat/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[idea-网址管理及分享]]></title>
    <link href="http://everettjf.github.io/2015/05/09/idea-site-link-favorite/"/>
    <id>http://everettjf.github.io/2015/05/09/idea-site-link-favorite/</id>
    <published>2015-05-08T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><ul>
<li>平时看网页、查资料，看到好的网站就加到收藏夹中，看到就加，看到就加……越来越多。日积月累，成百上千。</li>
<li>平时经常上得网站就那么几个。</li>
<li>网站收藏夹的作用如何发挥呢？</li>
</ul>
<h1 id="想法">想法</h1><ul>
<li>一个网站</li>
<li>可管理个人网址收藏</li>
<li>个人收藏可自动统计点击数目（可生成统计表等）</li>
<li>可将个人收藏共享到“网址广场”</li>
<li>网址来源:<ul>
<li>各大浏览器插件，替代各大浏览器的收藏功能。</li>
<li>导入现有收藏。</li>
<li>从网址广场加入到个人收藏。</li>
<li>手动录入。</li>
<li>系统根据个人收藏爱好，自动推荐广场的。</li>
<li>推荐收藏了，但很久不看的网址。</li>
</ul>
</li>
</ul>
<h1 id="其他">其他</h1><ul>
<li>知乎上有这么多人贡献自己的知识，那贡献所知道的网址应该不是问题。</li>
<li>可作为浏览器首页。</li>
</ul>
<h1 id="竞争对手">竞争对手</h1><ul>
<li>还没看到完全类似的。有一些网址收藏站点，但做的都太差了。</li>
</ul>
<h1 id="盈利">盈利</h1><ul>
<li>“优质”广告网址推送（标明是广告条目）</li>
<li>高级功能的按月收费（每月5元？）</li>
</ul>
<h1 id="我开始了，你呢？">我开始了，你呢？</h1><ul>
<li>在家第一个项目就从这个web项目开始吧，你看好吗？</li>
<li>有想法，告诉我吧。</li>
</ul>
<hr>
<p>欢迎关注微信公众号：everettjf0x 程序员的所想所记。</p>
<hr>
<p>blog:inkmind.xyz</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><ul>
<li>平时看网页、查资料，看到好的网站就加到收藏夹中，看到就加，看到就加……越来越多。日积月累，成百上千。</li>
<li>平时经常上得网站就那么几个。</li>
<li>网站收藏夹的作用如何发挥呢？</li>
</ul>
<h]]>
    </summary>
    
      <category term="idea" scheme="http://everettjf.github.io/tags/idea/"/>
    
      <category term="wechat" scheme="http://everettjf.github.io/tags/wechat/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[技术团队软硬件配置随想]]></title>
    <link href="http://everettjf.github.io/2015/05/06/rad-faq-basic/"/>
    <id>http://everettjf.github.io/2015/05/06/rad-faq-basic/</id>
    <published>2015-05-05T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="技术分享氛围">技术分享氛围</h1><ul>
<li>务必每周至少一次。内容不在多、不在精，在于交流、呼唤知识。</li>
</ul>
<h1 id="硬件配置">硬件配置</h1><ul>
<li>电脑配置：不能为破旧的电脑付钱。电脑配置低，严重影响工作效率。<br>传言某老板说，我不能让我的员工去等待电脑响应。</li>
<li>双显示器。</li>
</ul>
<h1 id="项目管理工具">项目管理工具</h1><ul>
<li>BUG管理：Jira，redmine等。</li>
<li>任务分配：worktile，tower等。</li>
<li>需求、知识库：印象笔记（evernote）、有道云协作等。</li>
</ul>
<h1 id="座位">座位</h1><ul>
<li>按照项目组织。同一项目成员在一起。</li>
<li>座位不固定。</li>
</ul>
<h1 id="座机电话">座机电话</h1><ul>
<li>研发人员务必不能配座机。</li>
</ul>
<h1 id="数据分析">数据分析</h1><ul>
<li>电商与技术相关更重要的是数据。</li>
<li>当量多后，应该招聘专门的数据分析人员。（使用机器学习技术分析大量数据）</li>
</ul>
<h1 id="代码如何存放？">代码如何存放？</h1><ul>
<li>代码是软件公司的核心竞争力，必须保证代码的有效性和安全性。</li>
<li>一般来说，公司内部要有存放代码的服务器（svn或git服务器）。</li>
<li>或者可以使用GitHub的私有服务器（收费）。</li>
<li>代码的有效性：保证代码服务器中包含所有产品代码（与最终产品一致）。<br>以前有的同事不喜欢提交代码。电脑坏了、硬盘坏了，或者人员离职了，代码还需要U盘手动复制。<br>更或者，与领导关系有问题的同事，少交接点代码什么的就不好了。</li>
<li>代码的安全性：保证代码服务器的安全。<ul>
<li>设置权限。最好不要每个人都能看到所有代码。（至少以项目或单个产品为单位，不同产品之间隔离）<br>权限应该“最小范围内最大化”。（以前同事做开发，总是缺少关键代码的权限，严重影响效率。）</li>
<li>防止数据丢失。有条件没条件都要对硬盘做RAID。</li>
<li>服务器防止偷窃。没遇到过，但认为很重要。</li>
</ul>
</li>
</ul>
<h1 id="持续集成">持续集成</h1><ul>
<li>一些重复性工作一定做成脚本，自动执行：利用hudson等。</li>
</ul>
<h1 id="专门的测试人员">专门的测试人员</h1><ul>
<li>认为创业团队可后期考虑。</li>
</ul>
<h1 id="项目时间估算">项目时间估算</h1><ul>
<li>根据具体需求确定项目周期。</li>
<li>多个版本迭代。切记一个版本吃个“胖子”。</li>
<li>优先保证可用。（简单、可用）</li>
</ul>
<h1 id="内部部署环境">内部部署环境</h1><ul>
<li>一般可以使用阿里云，但建议阿里云作为最终产品的发布环境。<br>若使用阿里云，可以有两个阿里云服务器，一个作为测试版本环境，一个作为发布环境。</li>
<li>也可以，公司内部服务器中通过虚拟机搭建测试环境。</li>
</ul>
<hr>
<p>欢迎关注微信公众号：everettjf0x 程序员的所想所记。</p>
<hr>
<p>blog:inkmind.xyz</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="技术分享氛围">技术分享氛围</h1><ul>
<li>务必每周至少一次。内容不在多、不在精，在于交流、呼唤知识。</li>
</ul>
<h1 id="硬件配置">硬件配置</h1><ul>
<li>电脑配置：不能为破旧的电脑付钱。电脑配置低，严重影响工作效率。]]>
    </summary>
    
      <category term="team" scheme="http://everettjf.github.io/tags/team/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[idea-输入法的vim模式]]></title>
    <link href="http://everettjf.github.io/2015/05/01/idea-input-vimmode/"/>
    <id>http://everettjf.github.io/2015/05/01/idea-input-vimmode/</id>
    <published>2015-04-30T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="vim下写中英文混合的文章">vim下写中英文混合的文章</h1><p>最近写这些文章，一直是在终端下用vim写。但vim的各种快捷键和中文输入法的配合实在是不爽。<br>要使用vim快捷键先要关闭中文输入法。</p>
<h1 id="vim模式">vim模式</h1><p>输入法是否要加入个vim用户模式呢？输入法增加当前模式的检测。如果是“插入模式”则进行正常的词汇匹配；如果是其他模式，则将输入消息直接传输到目标窗口（终端或GUI版本vim）。</p>
<h1 id="用户少">用户少</h1><p>用vim的毕竟只是程序员，程序员也只有少数用vim。</p>
<h1 id="写文章干脆不用vim了">写文章干脆不用vim了</h1><p>vim用上手了就会导致“总想着到处都支持vim”，但事实很残酷。<br>试用了下SublimeText，也就习惯了。<br>写文章不像写代码那样（只是输入英文，且换行等各种操作多），不用vim模式也没感觉速度上有多少影响。</p>
<h1 id="总结">总结</h1><p>输入法确实没有必要有vim模式了。<br>哈。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="vim下写中英文混合的文章">vim下写中英文混合的文章</h1><p>最近写这些文章，一直是在终端下用vim写。但vim的各种快捷键和中文输入法的配合实在是不爽。<br>要使用vim快捷键先要关闭中文输入法。</p>
<h1 id="vim模式">vim模式</]]>
    </summary>
    
      <category term="idea" scheme="http://everettjf.github.io/tags/idea/"/>
    
      <category term="vim" scheme="http://everettjf.github.io/tags/vim/"/>
    
      <category term="输入法" scheme="http://everettjf.github.io/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[理想的工作环境]]></title>
    <link href="http://everettjf.github.io/2015/04/28/wechat-work-place/"/>
    <id>http://everettjf.github.io/2015/04/28/wechat-work-place/</id>
    <published>2015-04-27T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<p><em>以下想法主要面向软件公司（互联网公司）</em></p>
<h1 id="多数现有的工作环境">多数现有的工作环境</h1><ul>
<li>1周工作5天或6天，1天工作8小时、7.5小时或7小时。</li>
<li>办公室隔间。</li>
<li>每年一次或每两年一次的集体旅游。</li>
<li>白色的墙上贴着规章制度。</li>
<li>层级管理。</li>
<li>对员工健康不关注。</li>
<li>全部时间用于工作。</li>
<li>被动的知识分享。</li>
<li>员工固定的12或14、15薪。</li>
<li>乒乓球室。</li>
<li>台式电话。</li>
<li>自己翻墙，甚至隔离网络。</li>
</ul>
<h1 id="我认为理想的工作环境">我认为理想的工作环境</h1><ul>
<li>1周工作4天或5天，1天工作7.5小时或7小时。</li>
<li>开放办公环境。</li>
<li>公司内部办公位置随意组合，可以站着编程，甚至可以趴着编程。</li>
<li>内部装饰、涂鸦由员工创造。</li>
<li>每月4天或8天（甚至更多）远程办公时间。</li>
<li>弹性工作时间。</li>
<li>扁平化管理。</li>
<li>关注员工健康，每天定时提醒员工锻炼。</li>
<li>主动的知识分享。</li>
<li>业绩好，年底不只是14、15，甚至24、36薪（有点夸大，但存在）。</li>
<li>乒乓球室、游戏娱乐室、台球室等。</li>
<li>没有台式电话。</li>
<li>公司网络内置翻墙。</li>
<li>全自动咖啡机。</li>
<li>多个白板。</li>
<li>工程学椅子。</li>
<li>人均带宽100MB/s。</li>
<li>有公共书架，每个人都可以贡献书籍。</li>
<li>双显示器。</li>
</ul>
<h1 id="理想的">理想的</h1><ul>
<li>理想，如何成为现实？</li>
<li>找不到现有的公司，为何不尝试从自己开始。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>以下想法主要面向软件公司（互联网公司）</em></p>
<h1 id="多数现有的工作环境">多数现有的工作环境</h1><ul>
<li>1周工作5天或6天，1天工作8小时、7.5小时或7小时。</li>
<li>办公室隔间。</li>
<li>每年一次或每两年]]>
    </summary>
    
      <category term="wechat" scheme="http://everettjf.github.io/tags/wechat/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[idea-开源团队笔记]]></title>
    <link href="http://everettjf.github.io/2015/04/21/idea-team-note-and-blog-dream/"/>
    <id>http://everettjf.github.io/2015/04/21/idea-team-note-and-blog-dream/</id>
    <published>2015-04-20T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="团队知识库的需要">团队知识库的需要</h1><p>最近加入创业团队，建立团队的知识库。（我以前的公司没有专用的知识库，很多知识都是口口相传的非物质文化遗产。深刻体会到知识库的必要。）调查了3个产品：</p>
<ol>
<li>印象笔记（evernote）：企业版60每人月。但看起来那些企业功能很吸引人。</li>
<li>有道云笔记（云协作）：20人以下免费（容量有限）。</li>
<li>为知笔记：企业版也是收费。<br>根据现状，我们选用了有道云协作。</li>
</ol>
<h1 id="古老的知识库">古老的知识库</h1><ul>
<li>说到知识库，程序员们自然会想到wiki之类的系统。但在我看来，这些只是适合中级以上程序员，程序员之外的行业更是别用了，他们懒得去用这么“难用”的东西。</li>
<li>Wordpress博客系统呢？总觉得步骤也是那么多。</li>
</ul>
<h1 id="新时代的知识库">新时代的知识库</h1><ul>
<li>支持各种终端：windows、mac、iOS、Android、WP，以及Web方式（Web方式觉得更次要）。</li>
<li>简单易用，不只是程序员用，市场人员、办公室人员，甚至大量招聘来的导购也会使用。</li>
<li>文章标签、分类、置顶、收藏，自然是不可缺少。</li>
<li>私人、团队可区分。</li>
<li>服务器可在企业内部搭建。</li>
<li>加密存储、传输也可考虑。</li>
</ul>
<h1 id="开源知识库功能列表">开源知识库功能列表</h1><ul>
<li>团队笔记</li>
<li>Markdown编写笔记</li>
<li>用户机制</li>
<li>日志机制</li>
</ul>
<h1 id="技术实现">技术实现</h1><ul>
<li>Desktop采用Qt开发（同时支持Windows Mac）</li>
<li>Server采用用Golang Web（部署简单）</li>
<li>iOS Android各自开发</li>
</ul>
<h1 id="开始吧">开始吧</h1><p><a href="https://github.com/everettjf/OpenSourceTeamNote" target="_blank" rel="external">https://github.com/everettjf/OpenSourceTeamNote</a></p>
<h1 id="这又是一个轮子吗？">这又是一个轮子吗？</h1><ul>
<li>免费的轮子</li>
<li>不限制用户数的轮子</li>
<li>当杀毒软件都免费时，360杀毒免费了</li>
<li>当…</li>
<li>当笔记软件都在依赖企业赚钱时，OpenSourceTeamNote是否要出来了？</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="团队知识库的需要">团队知识库的需要</h1><p>最近加入创业团队，建立团队的知识库。（我以前的公司没有专用的知识库，很多知识都是口口相传的非物质文化遗产。深刻体会到知识库的必要。）调查了3个产品：</p>
<ol>
<li>印象笔记（evernote）：企业版]]>
    </summary>
    
      <category term="idea" scheme="http://everettjf.github.io/tags/idea/"/>
    
      <category term="knowledgebase" scheme="http://everettjf.github.io/tags/knowledgebase/"/>
    
      <category term="note" scheme="http://everettjf.github.io/tags/note/"/>
    
      <category term="team" scheme="http://everettjf.github.io/tags/team/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习]]></title>
    <link href="http://everettjf.github.io/2015/04/19/wechat-learning/"/>
    <id>http://everettjf.github.io/2015/04/19/wechat-learning/</id>
    <published>2015-04-18T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="专一：挑水、砍柴、做饭">专一：挑水、砍柴、做饭</h1><p>听过的一个故事：</p>
<p>小和尚问老和尚，年轻时你做什么？老和尚说：挑水、砍柴、做饭。<br>小和尚又问老和尚，得道后你又做什么？老和尚说：挑水、砍柴、做饭。<br>小和尚说，有什么区别呢？<br>老和尚说：</p>
<p>年轻时，我挑水的时候想着砍柴，砍柴时想着做饭。<br>而现在，我挑水时只想挑水，砍柴时只想砍柴，做饭时只想做饭。</p>
<h1 id="持续积累">持续积累</h1><p>《观书有感》其二(written by 朱熹)<br>昨夜江边春水生，艨艟巨舰一毛轻。<br>向来枉费推移力，此日中流自在行。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="专一：挑水、砍柴、做饭">专一：挑水、砍柴、做饭</h1><p>听过的一个故事：</p>
<p>小和尚问老和尚，年轻时你做什么？老和尚说：挑水、砍柴、做饭。<br>小和尚又问老和尚，得道后你又做什么？老和尚说：挑水、砍柴、做饭。<br>小和尚说，有什么区别呢？<b]]>
    </summary>
    
      <category term="learn" scheme="http://everettjf.github.io/tags/learn/"/>
    
      <category term="wechat" scheme="http://everettjf.github.io/tags/wechat/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[idea-图书借阅登记App（或个人图书管理App）]]></title>
    <link href="http://everettjf.github.io/2015/04/15/idea-book-borrow-app/"/>
    <id>http://everettjf.github.io/2015/04/15/idea-book-borrow-app/</id>
    <published>2015-04-14T16:00:00.000Z</published>
    <updated>2015-10-30T10:27:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="图书借阅登记App（或个人图书管理App）">图书借阅登记App（或个人图书管理App）</h1><h2 id="背景">背景</h2><ol>
<li>公司最近要搬家，新增书架。考虑每个人都可以分享自己的书，看书最好有个登记。</li>
<li>自己工作5年来，买了很多书，可以登记到App中。（不想打字）</li>
</ol>
<h2 id="想法">想法</h2><ol>
<li>App配合后台。</li>
<li>App扫描书的条码。</li>
<li>通过条码后台获取到书的详细信息（后台需要能获取到详细信息，可通过爬虫爬下豆瓣读书，或者正规途径获取书的资料）。</li>
<li>可以登录（用于识别身份）。</li>
<li>可以登记某本书为“借阅、归还等”状态。</li>
</ol>
<h2 id="附属">附属</h2><ol>
<li>图书自动分类。（技术类、管理类等）</li>
<li>自动分析。（哪本书借阅的多，哪本书借阅时间长）（分析出谁贡献大:分享的书被看的次数多且时间长）</li>
</ol>
<h2 id="商业">商业</h2><ol>
<li>App免费使用。</li>
<li>根据现有图书，后台分析出借阅习惯，自动推荐“可能购买的书籍”，提供商家渠道。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="图书借阅登记App（或个人图书管理App）">图书借阅登记App（或个人图书管理App）</h1><h2 id="背景">背景</h2><ol>
<li>公司最近要搬家，新增书架。考虑每个人都可以分享自己的书，看书最好有个登记。</li>
<li>自己工作5年来，]]>
    </summary>
    
      <category term="app" scheme="http://everettjf.github.io/tags/app/"/>
    
      <category term="idea" scheme="http://everettjf.github.io/tags/idea/"/>
    
      <category term="随笔" scheme="http://everettjf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
